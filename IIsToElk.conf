input {
	file {
		type => "IISLog"
		path => "D:/ELK/logstash-7.10.2/config/IIS Log/*.log"
		start_position => "beginning"
		sincedb_path => "D:/ELK/logstash-7.10.2/config/IIS Log/sincedb_file"
		sincedb_clean_after => "1" 	
	}
}

filter {
  if [message] =~ /^#/ { # Check if the line starts with "#"
    drop {} # Drop the entire packet if it starts with "#"
  } else {
    # Process the remaining packets
	   csv {
    separator => " " # Use the appropriate separator used in your IIS logs
    columns => ["date", "time", "s-ip", "method", "SmallUrl", "cs-uri-query", "s-port", "cs-username", "ClientIp", "UserAgent", "BigUrl", "Status", "sc-substatus", "sc-win32-status", "TimeTaken"]	
	}
  
    mutate {
    add_field => {
      "combined_datetime" => "%{date} %{time}"
    }
	 remove_field => [ "date", "time", "s-ip", "cs-uri-query", "s-port", "cs-username", "sc-substatus", "sc-win32-status", "type"]
  }


    date {
    match => [ "date", "YYYY-MM-dd" ] # Match the format of your string
    target => "parsed_datetime_d" # Store the parsed datetime
	timezone => "UTC"
  }
  
    date {
    match => [ "time", "HH:mm:ss" ] # Match the format of your string
    target => "parsed_datetime_t" # Store the parsed datetime
	timezone => "UTC"
  }
  
    date {
    match => [ "combined_datetime", "YYYY-MM-dd HH:mm:ss" ] # Match the format of the combined datetime
    target => "RecordDateTime" # Store the parsed datetime
	timezone => "UTC"
  }
  
  }
}

output {
stdout {}
elasticsearch {
hosts => ["localhost:9200"]
index => "testiislogfromfile03"
# document_id => "%{RecordDateTime}%{SmallUrl}%{BigUrl}%{Status}%{host}%{method}%{TimeTaken}%{path}%{ClientIp}%{UserAgent}"
}
#stdout { codec => rubydebug }
}
